#!/usr/bin/python3
# Copyright (c) 2021 Marty Mills <daggerbot@gmail.com>
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# assettool.py
#   Generates a Ninja build file for compiling the game assets.
#
# usage:
#   assettool.py -i OBJDIR -o ARCHIVE -p PYTHONCMD -t TOOLDIR ASSETS_YAML ASSETS_NINJA

import getopt
import os
import os.path
import sys

import yaml

__all__ = []

def unescape(s):
    out = ""
    for c in s:
        if c == ' ':
            out += "\\ "
        elif c == '$':
            out += "\\$"
        elif c == '\\':
            out += "\\\\"
        else:
            out += c
    return out

if __name__ == "__main__":
    #
    # Parse command line args
    #

    input_path = None
    output_path = None
    python_cmd = None
    archive_path = None
    obj_dir = None
    tool_dir = None

    opts, args = getopt.getopt(sys.argv[1:], "i:o:p:t:")

    for opt, param in opts:
        if opt == "-i":
            assert obj_dir is None
            obj_dir = param
        elif opt == "-o":
            assert archive_path is None
            archive_path = param
        elif opt == "-p":
            assert python_cmd is None
            python_cmd = param
        elif opt == "-t":
            assert tool_dir is None
            tool_dir = param

    assert not python_cmd is None
    assert not archive_path is None
    assert not obj_dir is None
    assert not tool_dir is None
    assert len(args) == 2

    input_path = args[0]
    src_dir = os.path.dirname(os.path.realpath(input_path))
    output_path = args[1]

    #
    # Parse the input .yaml file
    #

    with open(input_path, "r") as fp:
        input_src = fp.read()
    input_doc = yaml.load(input_src, yaml.BaseLoader)

    #
    # Process dependencies
    #

    archive_deps = []
    archive_args = []
    tilesets = []

    for item in input_doc["assets"]:
        name = item["name"]

        if "path" in item:
            path = item["path"]
        else:
            path = name

        if not "type" in item:
            dep_path = os.path.relpath(os.path.join(src_dir, path), obj_dir)
            archive_deps.append(dep_path)
            archive_args.append("{}={}".format(name, dep_path))
        elif item["type"] == "tileset":
            dep_path = os.path.relpath(os.path.join(src_dir, path), obj_dir)
            obj_path = name
            archive_deps.append(obj_path)
            archive_args.append("{}={}".format(name, obj_path))
            tilesets.append((dep_path, obj_path))
        else:
            assert 0 and "Invalid asset type: {}".format(item["type"])

    #
    # Generate the output .ninja file
    #

    out_dir = os.path.dirname(os.path.realpath(output_path))
    os.makedirs(out_dir, mode=0o755, exist_ok=True)

    with open(output_path, "w") as fp:
        fp.write("# Generated by {}\n".format(os.path.basename(sys.argv[0])))
        fp.write("ninja_required_version = 1.5\n")
        fp.write("\n")
        fp.write("PYTHON = {}\n".format(unescape(python_cmd)))
        fp.write("TOOLDIR = {}\n".format(unescape(os.path.relpath(tool_dir, obj_dir))))
        fp.write("\n")
        fp.write("rule ARCHIVE\n")
        fp.write("  command = $PYTHON $TOOLDIR/pkz.py -o $out $INPUTS\n")
        fp.write("  description = Packing assets\n")
        fp.write("\n")
        fp.write("rule TILESET\n")
        fp.write("  command = $PYTHON $TOOLDIR/tilesetcomp.py -d $out.d $INPUT $out\n")
        fp.write("  depfile = $out.d\n")
        fp.write("  description = Compiling tileset $out\n")
        fp.write("\n")
        fp.write("build {}: ARCHIVE {}".format(unescape(os.path.relpath(archive_path, obj_dir)),
                                               unescape(os.path.join(os.path.relpath(tool_dir, obj_dir), "pkz.py"))))
        for dep in archive_deps:
            fp.write(" {}".format(dep))
        fp.write("\n  INPUTS =")
        for arg in archive_args:
            fp.write(" {}".format(arg))
        fp.write("\n")

        for path, obj_path in tilesets:
            fp.write("\n")
            fp.write("build {}: TILESET {} {} {}\n".format(
                unescape(obj_path),
                unescape(os.path.join(os.path.relpath(tool_dir, obj_dir), "atlascomp.py")),
                unescape(os.path.join(os.path.relpath(tool_dir, obj_dir), "tilesetcomp.py")),
                unescape(path)))
            fp.write("  INPUT = {}\n".format(unescape(path)))
